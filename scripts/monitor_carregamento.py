#!/usr/bin/env python3
"""
Script para monitorar o progresso dos carregamentos CNPJ
Mostra estat√≠sticas em tempo real dos scripts em execu√ß√£o
"""

import os
import sys
import subprocess
import time
import logging
from datetime import datetime
from pathlib import Path

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

try:
    from config.config import DATABASE_CONFIG
    import pymysql
except ImportError:
    print("‚ùå Erro: N√£o foi poss√≠vel importar configura√ß√µes do banco")
    print("üí° Certifique-se de que o arquivo .env est√° configurado")
    sys.exit(1)

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s'
)
logger = logging.getLogger(__name__)

def conectar_banco():
    """Conecta ao banco de dados"""
    try:
        db_config = DATABASE_CONFIG.copy()
        if 'connection_timeout' in db_config:
            del db_config['connection_timeout']
        
        conn = pymysql.connect(**db_config)
        return conn
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar ao banco: {e}")
        return None

def obter_estatisticas_banco():
    """Obt√©m estat√≠sticas do banco de dados"""
    conn = conectar_banco()
    if not conn:
        return None
    
    try:
        cursor = conn.cursor()
        
        # Contar registros em cada tabela
        tabelas = {
            'cnpj_empresas': 'Empresas',
            'cnpj_estabelecimentos': 'Estabelecimentos', 
            'cnpj_socios': 'S√≥cios',
            'cnpj_simples': 'Simples Nacional'
        }
        
        stats = {}
        for tabela, nome in tabelas.items():
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {tabela}")
                count = cursor.fetchone()[0]
                stats[tabela] = {
                    'nome': nome,
                    'registros': count
                }
            except Exception:
                stats[tabela] = {
                    'nome': nome,
                    'registros': 0
                }
        
        cursor.close()
        conn.close()
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        if conn:
            conn.close()
        return None

def verificar_processos_carregamento():
    """Verifica quais scripts de carregamento est√£o em execu√ß√£o"""
    scripts = [
        'cnpj_empresas.py',
        'cnpj_estabelecimentos.py', 
        'cnpj_socios.py',
        'cnpj_simples.py'
    ]
    
    processos = {}
    
    try:
        resultado = subprocess.run(
            ['ps', 'aux'],
            capture_output=True,
            text=True
        )
        
        for script in scripts:
            if script in resultado.stdout:
                # Extrair informa√ß√µes do processo
                linhas = resultado.stdout.split('\n')
                for linha in linhas:
                    if script in linha and 'python' in linha:
                        partes = linha.split()
                        if len(partes) >= 11:
                            pid = partes[1]
                            cpu = partes[2]
                            mem = partes[3]
                            tempo = partes[9]
                            
                            processos[script] = {
                                'pid': pid,
                                'cpu': cpu,
                                'mem': mem,
                                'tempo': tempo
                            }
                            break
        
        return processos
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar processos: {e}")
        return {}

def mostrar_ajuda():
    """Mostra informa√ß√µes de uso do script"""
    print("""
üìä Monitor de Carregamento CNPJ
==============================

Este script monitora o progresso dos carregamentos CNPJ em tempo real.

üîß Uso:
    python scripts/monitor_carregamento.py

üìã Funcionalidades:
- Mostra estat√≠sticas do banco de dados
- Lista processos de carregamento em execu√ß√£o
- Atualiza√ß√£o autom√°tica a cada 30 segundos
- Hist√≥rico de progresso

‚å®Ô∏è  Controles:
- Ctrl+C: Sair do monitor
- Enter: Atualizar manualmente

üìä Informa√ß√µes mostradas:
- Registros por tabela
- Processos em execu√ß√£o (PID, CPU, Mem√≥ria, Tempo)
- Data/hora da √∫ltima atualiza√ß√£o
""")

def main():
    """Fun√ß√£o principal do monitor"""
    logger.info("üìä Monitor de Carregamento CNPJ iniciado")
    logger.info("üí° Pressione Ctrl+C para sair")
    logger.info("")
    
    try:
        while True:
            # Limpar tela (funciona na maioria dos terminais)
            os.system('clear' if os.name == 'posix' else 'cls')
            
            print("=" * 80)
            print("üìä MONITOR DE CARREGAMENTO CNPJ")
            print("=" * 80)
            print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            print("")
            
            # Estat√≠sticas do banco
            print("üóÑÔ∏è  ESTAT√çSTICAS DO BANCO DE DADOS:")
            print("-" * 50)
            
            stats = obter_estatisticas_banco()
            if stats:
                for tabela, info in stats.items():
                    registros = info['registros']
                    registros_formatado = f"{registros:,}".replace(',', '.')
                    print(f"üìã {info['nome']:<20}: {registros_formatado:>12} registros")
            else:
                print("‚ùå N√£o foi poss√≠vel obter estat√≠sticas do banco")
            
            print("")
            
            # Processos em execu√ß√£o
            print("üîÑ PROCESSOS DE CARREGAMENTO EM EXECU√á√ÉO:")
            print("-" * 50)
            
            processos = verificar_processos_carregamento()
            if processos:
                print(f"{'Script':<25} {'PID':<8} {'CPU%':<6} {'MEM%':<6} {'Tempo':<8}")
                print("-" * 60)
                
                for script, info in processos.items():
                    nome_script = script.replace('cnpj_', '').replace('.py', '').title()
                    print(f"{nome_script:<25} {info['pid']:<8} {info['cpu']:<6} {info['mem']:<6} {info['tempo']:<8}")
            else:
                print("‚ÑπÔ∏è  Nenhum script de carregamento em execu√ß√£o")
            
            print("")
            print("‚å®Ô∏è  Pressione Enter para atualizar ou Ctrl+C para sair")
            
            # Aguardar entrada do usu√°rio ou timeout
            try:
                input()
            except KeyboardInterrupt:
                break
                
    except KeyboardInterrupt:
        print("")
        print("üëã Monitor encerrado pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro no monitor: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        mostrar_ajuda()
    else:
        main()
